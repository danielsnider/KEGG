// This GUI file is generated by guibuilder version 2.2
//////////
//f = findobj('figure_name','KEGG_parser');
//if isempty(f) then
f=figure('figure_position',[353,54],'figure_size',[656,611],'auto_resize','on','background',[33],'figure_name','KEGG_parser');
delmenu(f.figure_id,gettext('File'))
delmenu(f.figure_id,gettext('?'))
delmenu(f.figure_id,gettext('Tools'))
toolbar(f.figure_id,'off')
handles.dummy = 0;

// Load buttons
handles.load_www=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.01,0.9,0.20,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Load KGML from web','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','load_www','Callback','load_www_callback(handles)');

handles.load_loc=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.23,0.9,0.20,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Load local KGML','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','load_loc','Callback','load_loc_callback(handles)');

handles.load_map=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.44,0.9,0.20,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Load local map','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','load_map','Callback','load_map_callback(handles)');

set(handles.load_www,'Position',[0.01,0.9,0.20,0.07])
set(handles.load_loc,'Position',[0.23,0.9,0.20,0.07])
set(handles.load_map,'Position',[0.44,0.9,0.20,0.07])

//Node and interaction labels
handles.node1_label=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.01,0.80,0.12,0.05],'Relief','flat','SliderStep',[0.01,0.1],'String','Node 1','Style','text','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','node1_label','Callback','');

handles.node2_label=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.15,0.8,0.12,0.05],'Relief','flat','SliderStep',[0.01,0.1],'String','Node 2','Style','text','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','node2_label','Callback','');

handles.node3_label=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.29,0.8,0.16,0.05],'Relief','flat','SliderStep',[0.01,0.1],'String','Interaction Type','Style','text','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','node3_label','Callback','');

//Node and interaction drop-downs
handles.node1=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.01,0.74,0.12,0.05],'Relief','flat','SliderStep',[0.01,0.1],'String','UnName4','Style','popupmenu','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','node1','Callback','node1_callback(handles)');

handles.node2=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.15,0.74,0.12,0.05],'Relief','flat','SliderStep',[0.01,0.1],'String','UnName5','Style','popupmenu','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','node2','Callback','node2_callback(handles)');

handles.node3=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.29,0.74,0.16,0.05],'Relief','flat','SliderStep',[0.01,0.1],'String',['activation';'inhibition';'binding'],'Style','popupmenu','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','node3','Callback','node2_callback(handles)');

// Action pushbuttons
handles.add_node=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.01,0.6,0.15,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Add Node','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','add_node','Callback','add_nodes(handles)');

handles.del_node=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.18,0.6,0.15,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Delete Node','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','del_node','Callback','del_nodes(handles)');

handles.add_edge=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.35,0.6,0.15,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Add edge','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','add_edge','Callback','add_edges(handles)');

handles.del_edge=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.52,0.6,0.15,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Delete edge','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','del_edge','Callback','del_edges(handles)');

handles.rev_edge=uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.69,0.6,0.15,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Reverse edge','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','rev_edge','Callback','rev_edges(handles)');

//Save buttons
handles.save_loc = uicontrol(f,'unit','normalized','BackgroundColor',[0.6,0.6,0.6],'Enable','on','FontAngle','normal','FontName','helvetica','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.01,0.46,0.20,0.07],'Relief','raised','SliderStep',[0.01,0.1],'String','Save graph','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','save_loc','Callback','save_loc(handles)')


//else
//    figure(f);
//end

//////////

//exec('C:\Users\HP\Dropbox\Bioinformatics Group\Scilab_scripts\KEGG_parser\kgraph.sce', -1)

//exec("kgraph.sce");

//////////
// Callbacks are defined as below. Please do not delete the comments as it will be used in coming version
//////////

function load_www_callback(handles,f)
    //Write your callback for  load_www  here
    path_url = 'http://www.genome.jp/kegg-bin/download?entry=xxx&format=kgml';
    [FileName, path_name]=uigetfile("*.path", "", "Type in KEGG pathway ID");
    string_out=strsubst(path_url,'xxx',FileName);
    g = kgraph(string_out);
    set_node_labels(g);
    set(f,'user_data',g);
    show_graph(g);

endfunction


function handles = load_loc_callback(handles,f)
    //Write your callback for  load_loc  here
    [FileName, path_name]=uigetfile("*.xml", "", "Load KGML");
    OS = getos();
    if ~strcmp(OS,'Windows') then
        full_path = strcat([path_name,"\",FileName]);
    else
        full_path = strcat([path_name,"/",FileName]);
    end
    g = kgraph(full_path);
    set_node_labels(g);
    set(f,'user_data',g);
    show_graph(g);

endfunction


function load_map_callback(handles,f)
    //Write your callback for  load_map  here
    [FileName, path_name]=uigetfile("*.xgraph", "", "Load Saved Graph");
    OS = getos();
    if ~strcmp(OS,'Windows') then
        full_path = strcat([path_name,"\",FileName]);
    else
        full_path = strcat([path_name,"/",FileName]);
    end
    g = load_graph(full_path);
    set(f,'user_data',g);
    show_graph(g);
    
endfunction


function node1_callback(handles)
    //Write your callback for  node1  here

endfunction

function node2_callback(handles)
    //Write your callback for  node2  here

endfunction

function add_nodes(handles,f)
    //Write your callback for  add_nodes here
    params = x_mdialog('enter sine signal',["X";"Y";"Name"],['10';'10';'Unknown'])
    ge_do_quit();
    g = get(f,'user_data');
    g = add_node(g, evstr(params(1:2)), params(3));
    set(f,'user_data',g);
    set_node_labels(g);
    last = g.nodes.number;
    show_graph(g);
    hilite_nodes(last);
    

endfunction

function del_nodes(handles,f)
    //Write your callback for del_nodes  here
    g = get(f,'user_data');
    v = handles.node1.Value
    g = delete_nodes(v,g);
    set(f,'user_data',g);
    set_node_labels(g);
    ge_do_quit();
    show_graph(g);
    

endfunction

function add_edges(handles,f)
    //Write your callback for add_edges  here
    g = get(f,'user_data');
    i = handles.node1.Value;
    j = handles.node2.Value;
    inter = handles.node3.Value;
    select inter
    case 1 then
        col = 5;
    case 2 then
        col = 3;
    case 3 then
        col = 2;
    end
    g = add_edge(i,j,g);
    last = size(g.edges);
    g.edges.graphics.foreground(1:2,last) = [col;col];
    str = strcat([g.nodes.graphics.name(i),"->",g.nodes.graphics.name(j)]);
    g.edges.graphics.name(last) = str;
    set(f,'user_data',g);
    set_node_labels(g);
    ge_do_quit();
    show_graph(g);

endfunction

function del_edges(handles,f)
    //Write your callback for del_edges  here
    g = get(f,'user_data');
    i = handles.node1.Value;
    j = handles.node2.Value;
    g = delete_arcs(i,j,g);
    set(f,'user_data',g);
    set_node_labels(g);
    ge_do_quit();
    show_graph(g);

endfunction

function rev_edges(handles,f)
    //Write your callback for rev_edges  here
    g = get(f,'user_data');
    i = handles.node1.Value;
    j = handles.node2.Value;
    ind_t = i == g.edges.tail;
    ind_h = j == g.edges.head;
    ind_gen = find(ind_h & ind_t);
    g.edges.tail(ind_gen)=j;
    g.edges.head(ind_gen)=i;
    str = strcat([g.nodes.graphics.name(j),"->",g.nodes.graphics.name(i)]);
    g.edges.graphics.name(ind_gen) = str;
    ge_do_quit();
    set(f,'user_data',g);
    show_graph(g);
    set_node_labels(g);

endfunction

function save_loc(handles,f)
    //Write your callback for rev_edges  here
    [FileName, path_name]=uiputfile("*.graph", "", "Load KGML");
    if isempty(strstr(FileName,'.graph')) then
        FileName = strcat([FileName,".graph"]);
    end
    OS = getos();
    if ~strcmp(OS,'Windows') then
        full_path = strcat([path_name,"\",FileName]);
    else
        full_path = strcat([path_name,"/",FileName]);
    end
    g = get(f,'user_data');
    save_graph(g,full_path);
endfunction


// Supporing functions

// Set node names in listboxes
function set_node_labels(g)
    Names = g.nodes.graphics.name;
    set(handles.node1,'String',Names);
    set(handles.node2,'String',Names);
endfunction


//parse KGML files
function g = kegg_graph(filename)
xDoc = xmlRead(filename);
pathway_att_labels = ['name','org','number','title','image'];
entry_attr_labels = ['id','name','type','link','reaction'];
graph_attr_labels = ['name','x','y','coords','type','width',..
'height','fgcolor','bgcolor'];
component_attr_labels = 'id';
relation_attr_labels = ['entry1', 'entry','type'];
subtype_attr_labels = ['name','value'];
reaction_attr_labels = ['id','name','type'];
sub_prod_attr_labels = ['id','name'];

rels = xmlXPath(xDoc,'//relation');
entry = xmlXPath(xDoc,'//entry');
inter_type = ['activation','binding','inhibition'];
k = 1;
for i = 1:length(rels) //pass through all relations create graph relation vectors
    children = rels(i).children;
    for j = 1:length(children)
        child = xmlXPath(children(j),'@name');
        child_str(j) = child.content;
    end
    for j = 1:size(inter_type,2);
        grep_str = grep(child_str,inter_type(1,j));
        if isempty(grep_str) then
            row(1,j) = 0;
        else
            row(1,j) = 1;
        end
    end
    

    //edge color definition
    row_dec = sum(row.*[2^[0,1,2]]);
    select row_dec;
    case 1 then
        col_str = 'red';
    case 2 then
        col_str = 'blue';
    case 3 then
        col_str = 'red';
    case 4 then
        col_str = 'green';
    case 6 then 
        col_str = 'green';
    else
        col_str = 'black';
    end

    // check for protein-compound-protein interaction
    tail_entr = xmlXPath(rels(i),'@entry1');
    head_entr = xmlXPath(rels(i),'@entry2');
    [row,which] = grep(child_str,'compound');

    if isempty(row) then
        tail(k) = eval(tail_entr.content);
        head(k) = eval(head_entr.content);
        edge_col(k) = color(col_str);
        k = k+1;
    else
        mid_entry = eval(children(row).attributes.value);
        tail(k) = eval(tail_entr.content);
        head(k) = mid_entry;
        edge_col(k) = color(col_str);
        k = k+1;
        tail(k) = mid_entry;
        head(k) = eval(head_entr.content);
        edge_col(k) = color(col_str);
        k = k+1;
    end
end

g = make_graph('pathway',1,length(entry),tail,head); //create graph of relations
g.edges.graphics.defaults.foreground = color('blue');
link_str = cell();
for i = 1:g.nodes.number // prepare node attirbutes
    entry_attr = xmlXPath(entry(i),'@*');
    id_str(i) = entry_attr.content(1);
    name_str(i) = entry_attr.content(2);
    type_str(i) = entry_attr.content(3);
    if strcmp(type_str(i),'group')==0 then
        for j = 2:length(entry(i).children)
            comps(1,j-1) = entry(i).children(j).attributes.id;
         end
    link_str(i).entries = comps;
    else
    link_str(i).entries = entry_attr.content(4);
    end
    gr_attr = xmlXPath(entry(i).children(1),'@*');
    gr_node_name = grep(gr_attr.name,'name');
    gr_node_x = grep(gr_attr.name,'/\bx/','r');
    gr_node_y = grep(gr_attr.name,'/\by/','r');
    g_gr_name_full = gr_attr.content(gr_node_name);
    if ~isempty(g_gr_name_full) then
        [s,e,text] = regexp(g_gr_name_full, '/\w*(?=,)/', 'o');
        if ~isempty(text) then
            g_gr_name(i) = text;
            flag(i,1:2) = [0 0];
        else
            g_gr_name(i) = g_gr_name_full;
            flag(i,1:2) = [0 0];
        end

    else 
        g_gr_name(i) = 'component';
        flag(i,1:2) = [1 0];
    end
    
    g_gr_x(i) = eval(gr_attr.content(gr_node_x));
    g_gr_y(i) = eval(gr_attr.content(gr_node_y));
    
end

//set graph dimeions
min_x = min(g_gr_x);
max_x = max(g_gr_x);
min_y = min(g_gr_y);
max_y = max(g_gr_y);
height = max_y-min_y+100;
width = max_x-min_x+100;

//set node attibutes
g.nodes.graphics.name = g_gr_name';
g.nodes.graphics.x = g_gr_x';
g.nodes.graphics.y = (max_y+50)-g_gr_y';
g.nodes.graphics.display='name';
g = add_node_data(g,'ID',id_str);
g = add_node_data(g,'Name',name_str);
g = add_node_data(g,'Type',type_str);
g = add_node_data(g,'Link',link_str);
g.edges.graphics.foreground = [edge_col'; edge_col'];

tail_glob = g.edges.tail;
head_glob = g.edges.head;
ne=edge_number(g);
comps = [];
for i = 1:ne // graph tweaks
    tail = g.edges.tail(i);
    head = g.edges.head(i);
    tail_type = g.nodes.data.Type(tail);
    head_type = g.nodes.data.Type(head);
    tx = g.nodes.graphics.x(tail);
    hx = g.nodes.graphics.x(head);
    
    //group node correction
    x = [tail,head];
    group_flag = [tail_type, head_type];
    ind = find(~strcmp(group_flag,'group'));
    for j = 1:length(ind)
        if flag(x(ind(j)),2) == 0 then
        comps = eval(g.nodes.data.Link(x(ind(j))).entries);
        for z = 1:length(comps)
            //if ind(j)==1 then
               comps_rel_tail = find(tail_glob==comps(z));
               g.edges.tail(comps_rel_tail)=x(ind(j)); 
           //elseif ind(j)==2
               comps_rel_head = find(head_glob==comps(z));
               g.edges.head(comps_rel_head)=x(ind(j));
            //end
            g = add_edge(comps(z), x(ind(j)),g);
            g.edges.graphics.foreground(1:2,edge_number(g)) = [2;2];
        end
        flag(x(ind(j)),2) = 1;
        end
    end
    
   
    
    //binding direction correction
    if g.edge.graphics.color(i,1)==2 then
        if rel_type ~=1 then
            if tx<hx then
                g.egdes.tail(i) = head;
                g.egdes.head(i) = tail;
            end
        end
    end
    
    
    
    
    // because metanet package does not contain arrows edg label are used to ...
    //indicate edge direction as "Node1->Node2"
    str = strcat([g.nodes.graphics.name(tail),'->',...
    g.nodes.graphics.name(head)]);
    g.edges.graphics.name(i) = str;

end
g.edges.graphics.display='name';


endfunction




